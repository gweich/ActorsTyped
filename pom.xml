<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>ActorsTyped</groupId>
	<artifactId>Patterns</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<akka.version>2.6.10</akka.version>
		<!-- at least for Discovery -->
		<scala.binary.version>2.13</scala.binary.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor-typed_2.13</artifactId>
			<version>${akka.version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.13.0</version>
		</dependency>

		<!-- Discovery and look up service The Akka Discovery API enables service 
			discovery to be provided by different technologies. It allows to delegate 
			endpoint lookup so that services can be configured depending on the environment 
			by other means than configuration files. -->
		<!--  
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-discovery_${scala.binary.version}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		-->

		<!-- In a microservices architecture, you should consider communication 
			within a service and between services. In general we recommend against using 
			Akka Cluster and actor messaging between different services because that 
			would result in a too tight code coupling between the services and difficulties 
			deploying these independent of each other, which is one of the main reasons 
			for using a microservices architecture. F Between different services Akka 
			HTTP or Akka gRPC can be used for synchronous (yet non-blocking) communication 
			and Akka Streams Kafka or other Alpakka connectors for integration asynchronous 
			communication. A traditional distributed application may have less complexity 
			and work well in many cases. For example for a small startup, with a single 
			team, building an application where time to market is everything. Akka Cluster 
			can efficiently be used for building such distributed application. The Cluster 
			extension gives you access to management tasks such as Joining, Leaving and 
			Downing and subscription of cluster membership events such as MemberUp, MemberRemoved 
			and UnreachableMember, which are exposed as event APIs. -->
		<!-- 
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-cluster_${scala.binary.version}</artifactId>
			<version>${akka.version}</version>
		</dependency>
		-->

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<configuration>
					<executable>java</executable>
					<arguments>
						<argument>-classpath</argument>
						<classpath />
						<argument>Main</argument>
					</arguments>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>